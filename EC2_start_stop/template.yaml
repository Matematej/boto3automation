AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Creates EC2 instance and starts and stops it once a day
Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Enter instance size. Default is t2.micro.
  AMI:
    Type: String
    Default: ami-0a8b4cd432b1c3063
    Description: Default AMI is a free tier linux.
  NotificationEmail:
    Type: String
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Globals:
  Function:
    Timeout: 10

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
  #EC2
  EC2forStartStop:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      Tags:
        - Key: "test_id"
          Value: "start-stop"

  #lambda function that starts ec2
  StartEC2function:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: EC2_lambda/
      Handler: start_ec2.lambda_handler
      Runtime: python3.9
      Events:
        startec2event:
          Type: Schedule
          Properties:
            Schedule: cron(10 20 * * ? *)
      Policies:
      - Statement:
          Effect: Allow
          Action:
              - ec2:*
          Resource: '*'
          Condition:
            StringEquals:
              ec2:Region: us-east-1

  #lambda functions that stops ec2
  StopEC2function:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: EC2_lambda/
      Handler: stop_ec2.lambda_handler
      Runtime: python3.9
      Events:
        stopec2event:
          Type: Schedule
          Properties:
            Schedule: cron(15 20 * * ? *)
      Policies:
      - Statement:
          Effect: Allow
          Action:
              - ec2:*
          Resource: '*'
          Condition:
            StringEquals:
              ec2:Region: us-east-1

  #SNS email
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Protocol: email
        Endpoint: !Ref NotificationEmail

  AlarmStart:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: '1'
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref StartEC2function

  AlarmStop:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: '1'
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref StopEC2function
Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value:
      Ref: EC2forStartStop