AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Creates EC2 instances and starts and stops them periodically
Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Enter instance size. Default is t2.micro.
  AMI:
    Type: String
    Default: ami-0a8b4cd432b1c3063
    Description: Default AMI is a free tier linux.
Globals:
  Function:
    Timeout: 30

Resources:
  #EC2 security group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: for start and stop
  #EC2
  EC2forStartStop:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType:
        Ref: InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 8
      SecurityGroupIds:
        - Ref: EC2SecurityGroup
      Tags:
        -
          Key: test_id
          Value: start-stop

  #IAM role for start and stop lambdas
  EC2Accessrole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Policies:
          - PolicyName: ec2-access-start
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action: 'ec2:*'
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}*"
          - PolicyName: ec2-access-stop
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action: 'ec2:*'
                Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}*"

  #lambda function that starts ec2
  StartEC2function:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: EC2_lambda/
      Handler: start_ec2.lambda_handler
      Runtime: python3.9
      Role: !Ref EC2Accessrole

  #lambda functions that stops ec2
  StopEC2function:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: EC2_lambda/
      Handler: stop_ec2.lambda_handler
      Runtime: python3.9
      Role: !Ref EC2Accessrole

  #EventbusRule
  #4:35 PM (UTC) every day
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      ScheduleExpression: "cron(35 16 * * ? *)"
      EventPattern: { "version": "0", "id": "6a7e8feb-b491-4cf7-a9f1-bf3703467718", "detail-type": "EC2 Instance State-change Notification", "source": "aws.ec2", "account": "111122223333", "time": "2017-12-22T18:43:48Z", "region": "us-west-1", "resources": [ "arn:aws:ec2:us-west-1:123456789012:instance/i-1234567890abcdef0" ], "detail": { "instance-id": " i-1234567890abcdef0", "state": "terminated" } }
      Targets:
          - Arn: !GetAtt StartEC2function.Arn
            Id: '1'

  #4:40 PM (UTC) every day
  ScheduledRule2: 
    Type: AWS::Events::Rule
    Properties: 
      ScheduleExpression: "cron(40 16 * * ? *)"
      EventPattern: { "version": "0", "id": "6a7e8feb-b491-4cf7-a9f1-bf3703467718", "detail-type": "EC2 Instance State-change Notification", "source": "aws.ec2", "account": "111122223333", "time": "2017-12-22T18:43:48Z", "region": "us-west-1", "resources": [ "arn:aws:ec2:us-west-1:123456789012:instance/i-1234567890abcdef0" ], "detail": { "instance-id": " i-1234567890abcdef0", "state": "terminated" } }
      Targets:
          - Arn: !GetAtt StopEC2function.Arn
            Id: '2'

  #Eventbus permisions
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt StartEC2function.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledRule.Arn

  PermissionForEventsToInvokeLambda2: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !GetAtt StopEC2function.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledRule2.Arn