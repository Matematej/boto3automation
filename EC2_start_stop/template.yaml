AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Creates EC2 instances and starts and stops them periodically
Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: Enter instance size. Default is t2.micro.
  AMI:
    Type: String
    Default: ami-0a8b4cd432b1c3063
    Description: Default AMI is a free tier linux.
Globals:
  Function:
    Timeout: 10

Resources:
#EC2 security group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: for start and stop

  EC2forStartStop:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMI
      InstanceType:
        Ref: InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 8
      SecurityGroupIds:
        - Ref: EC2SecurityGroup
      Tags:
        -
          Key: test_id
          Value: start-stop

  #IAM role for start and stop lambdas
  EC2Accessrole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Policies:
          - PolicyName: ec2-access-start
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                Resource: !Ref StartEC2function
          - PolicyName: ec2-access-stop
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                Resource: !Ref StopEC2function

#lambda function that starts ec2
  StartEC2function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EC2_lambda/
      Handler: start_ec2.lambda_handler
      Runtime: python3.9
      Role: !Ref EC2Accessrole
      Events: 
         Properties:
            EventBusName: !Ref ScheduledRule
            Input: '{}'
         Type: CloudWatchEvent

#lambda functions that stops ec2
  StopEC2function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: EC2_lambda/
      Handler: stop_ec2.lambda_handler
      Runtime: python3.9
      Role: !Ref EC2Accessrole
      Events: 
         Properties:
            EventBusName: !Ref ScheduledRule
            Input: '{}'
         Type: CloudWatchEvent

#EventbusRule
ScheduledRule: 
  Type: AWS::Events::Rule
  Properties: 
    Description: "ScheduledRule"
    ScheduleExpression: "2"
    State: "ENABLED"
    Targets: !Ref StartEC2function

#Eventbus permisions
PermissionForEventsToInvokeLambda: 
  Type: AWS::Lambda::Permission
  Properties: 
    FunctionName: !Ref "StartEC2function"
    Action: "lambda:InvokeFunction"
    Principal: "events.amazonaws.com"
    SourceArn: 
      Fn::GetAtt: 
        - "ScheduledRule"
        - "Arn"

ScheduledRule2: 
  Type: AWS::Events::Rule
  Properties: 
    Description: "ScheduledRule2"
    ScheduleExpression: "3"
    State: "ENABLED"
    Targets: !Ref StopEC2function

PermissionForEventsToInvokeLambda2: 
  Type: AWS::Lambda::Permission
  Properties: 
    FunctionName: !Ref "StopEC2function"
    Action: "lambda:InvokeFunction"
    Principal: "events.amazonaws.com"
    SourceArn: 
      Fn::GetAtt: 
        - "ScheduledRule2"
        - "Arn"